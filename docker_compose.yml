version: '3.8'

services:
  # Main API service
  code-autocompletion-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: code-autocompletion-api
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=development
      - MODEL_CACHE_DIR=/root/.cache/ai-model
      - LOG_LEVEL=INFO
      - WORKERS=4
      - MAX_CONCURRENT_REQUESTS=100
      - ENABLE_CORS=true
      - CORS_ORIGINS=*
      - CACHE_ENABLED=true
      - CACHE_TTL=3600
      - RATE_LIMIT_ENABLED=true
      - RATE_LIMIT_REQUESTS=60
      - RATE_LIMIT_PERIOD=60
    volumes:
      - ./backend-api:/app/backend-api
      - ./ai-model:/app/ai-model
      - ./data-processing:/app/data-processing
      - model-cache:/root/.cache/ai-model
      - logs:/app/logs
      - ./requirements.txt:/app/requirements.txt
    depends_on:
      - redis
      - prometheus
    networks:
      - code-autocompletion-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: code-autocompletion-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./docker/redis/redis.conf:/etc/redis/redis.conf
    command: redis-server /etc/redis/redis.conf
    networks:
      - code-autocompletion-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: code-autocompletion-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - code-autocompletion-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: code-autocompletion-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - code-autocompletion-network
    restart: unless-stopped

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: code-autocompletion-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - code-autocompletion-api
    networks:
      - code-autocompletion-network
    restart: unless-stopped

volumes:
  model-cache:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  logs:
    driver: local

networks:
  code-autocompletion-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16